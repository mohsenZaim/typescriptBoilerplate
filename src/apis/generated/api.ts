/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import axios, { AxiosRequestConfig, AxiosPromise } from 'axios';

//export const defaultBasePath = 'https://petstore.swagger.io/v2'.replace(/\/$/, "");
//export const defaultBasePath = 'https://petstore.swagger.io/v2';
export const defaultBasePath = '';

export class ApiResponse {
    'code': number;
    'type': string;
    'message': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ApiResponse.attributeTypeMap;
    }
}

export class Category {
    'id': number;
    'name': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Category.attributeTypeMap;
    }
}

export class Order {
    'id': number;
    'petId': number;
    'quantity': number;
    'shipDate': Date;
    /**
    * Order Status
    */
    'status': Order.StatusEnum;
    'complete': boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "petId",
            "baseName": "petId",
            "type": "number"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "shipDate",
            "baseName": "shipDate",
            "type": "Date"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Order.StatusEnum"
        },
        {
            "name": "complete",
            "baseName": "complete",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

export namespace Order {
    export enum StatusEnum {
        Placed = <any> 'placed',
        Approved = <any> 'approved',
        Delivered = <any> 'delivered'
    }
}
export class Pet {
    'id': number;
    'category': Category;
    'name': string;
    'photoUrls': Array<string>;
    'tags': Array<Tag>;
    /**
    * pet status in the store
    */
    'status': Pet.StatusEnum;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "Category"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "photoUrls",
            "baseName": "photoUrls",
            "type": "Array<string>"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<Tag>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Pet.StatusEnum"
        }    ];

    static getAttributeTypeMap() {
        return Pet.attributeTypeMap;
    }
}

export namespace Pet {
    export enum StatusEnum {
        Available = <any> 'available',
        Pending = <any> 'pending',
        Sold = <any> 'sold'
    }
}
export class Tag {
    'id': number;
    'name': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Tag.attributeTypeMap;
    }
}

export class User {
    'id': number;
    'username': string;
    'firstName': string;
    'lastName': string;
    'email': string;
    'password': string;
    'phone': string;
    /**
    * User Status
    */
    'userStatus': number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "userStatus",
            "baseName": "userStatus",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return User.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "Order.StatusEnum": Order.StatusEnum,
        "Pet.StatusEnum": Pet.StatusEnum,
}

let typeMap: {[index: string]: any} = {
    "ApiResponse": ApiResponse,
    "Category": Category,
    "Order": Order,
    "Pet": Pet,
    "Tag": Tag,
    "User": User,
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: AxiosRequestConfig): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (this.location == "query") {
            (<any>requestOptions.params)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        // Do nothing
    }
}

export enum PetApiApiKeys {
    api_key,
}

export class PetApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api_key': new ApiKeyAuth('header', 'api_key'),
        'petstore_auth': new OAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: PetApiApiKeys, value: string) {
        this.authentications[PetApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.petstore_auth.accessToken = token;
    }

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store
     */
    public addPet (body: Pet, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addPet.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete
     * @param apiKey 
     */
    public deletePet (petId: number, apiKey?: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/{petId}'
            .replace('{' + 'petId' + '}', String(petId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'petId' is not null or undefined
        if (petId === null || petId === undefined) {
            throw new Error('Required parameter petId was null or undefined when calling deletePet.');
        }

        headerParams['api_key'] = apiKey;

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'DELETE',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter
     */
    public findPetsByStatus (status: Array<'available' | 'pending' | 'sold'>, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/findByStatus';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling findPetsByStatus.');
        }

        if (status !== undefined) {
            queryParameters['status'] = status;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by
     */
    public findPetsByTags (tags: Array<string>, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/findByTags';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling findPetsByTags.');
        }

        if (tags !== undefined) {
            queryParameters['tags'] = tags;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return
     */
    public getPetById (petId: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/{petId}'
            .replace('{' + 'petId' + '}', String(petId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'petId' is not null or undefined
        if (petId === null || petId === undefined) {
            throw new Error('Required parameter petId was null or undefined when calling getPetById.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.api_key.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store
     */
    public updatePet (body: Pet, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePet.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'PUT',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated
     * @param name Updated name of the pet
     * @param status Updated status of the pet
     */
    public updatePetWithForm (petId: number, name?: string, status?: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/{petId}'
            .replace('{' + 'petId' + '}', String(petId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'petId' is not null or undefined
        if (petId === null || petId === undefined) {
            throw new Error('Required parameter petId was null or undefined when calling updatePetWithForm.');
        }

        let useFormData = false;

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (status !== undefined) {
            formParams['status'] = status;
        }

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * uploads an image
     * 
     * @param petId ID of pet to update
     * @param additionalMetadata Additional data to pass to server
     * @param file file to upload
     */
    public uploadFile (petId: number, additionalMetadata?: string, file?: Buffer, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/pet/{petId}/uploadImage'
            .replace('{' + 'petId' + '}', String(petId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'petId' is not null or undefined
        if (petId === null || petId === undefined) {
            throw new Error('Required parameter petId was null or undefined when calling uploadFile.');
        }

        let useFormData = false;

        if (additionalMetadata !== undefined) {
            formParams['additionalMetadata'] = additionalMetadata;
        }

        if (file !== undefined) {
            formParams['file'] = file;
        }
        useFormData = true;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.petstore_auth.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum StoreApiApiKeys {
    api_key,
}

export class StoreApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api_key': new ApiKeyAuth('header', 'api_key'),
        'petstore_auth': new OAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: StoreApiApiKeys, value: string) {
        this.authentications[StoreApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.petstore_auth.accessToken = token;
    }

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * @param orderId ID of the order that needs to be deleted
     */
    public deleteOrder (orderId: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/store/order/{orderId}'
            .replace('{' + 'orderId' + '}', String(orderId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrder.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'DELETE',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    public getInventory (canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/store/inventory';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.api_key.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched
     */
    public getOrderById (orderId: number, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/store/order/{orderId}'
            .replace('{' + 'orderId' + '}', String(orderId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrderById.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet
     */
    public placeOrder (body: Order, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/store/order';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling placeOrder.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum UserApiApiKeys {
    api_key,
}

export class UserApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api_key': new ApiKeyAuth('header', 'api_key'),
        'petstore_auth': new OAuth(),
    }

    constructor(basePath?: string, defaultHeaders?: any){
        if (basePath) {
            this.basePath = basePath;
        }
        if (defaultHeaders) {
            this.defaultHeaders = defaultHeaders;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: UserApiApiKeys, value: string) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.petstore_auth.accessToken = token;
    }

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object
     */
    public createUser (body: User, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     */
    public createUsersWithArrayInput (body: Array<User>, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/createWithArray';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUsersWithArrayInput.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     */
    public createUsersWithListInput (body: Array<User>, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/createWithList';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUsersWithListInput.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted
     */
    public deleteUser (username: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/{username}'
            .replace('{' + 'username' + '}', String(username));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'DELETE',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     */
    public getUserByName (username: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/{username}'
            .replace('{' + 'username' + '}', String(username));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Logs user into the system
     * 
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    public loginUser (username: string, password: string, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/login';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling loginUser.');
        }

        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling loginUser.');
        }

        if (username !== undefined) {
            queryParameters['username'] = username;
        }

        if (password !== undefined) {
            queryParameters['password'] = password;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Logs out current logged in user session
     * 
     */
    public logoutUser (canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/logout';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be updated
     * @param body Updated user object
     */
    public updateUser (username: string, body: User, canceller?: any) : AxiosPromise {
        const localVarPath = this.basePath + '/user/{username}'
            .replace('{' + 'username' + '}', String(username));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'PUT',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            cancelToken: new axios.CancelToken(function executor(c) {
                // An executor function receives a cancel function as a parameter
                if (canceller)
                canceller(c);
            }),
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                let formData = new FormData();
                formData.append("file", formParams.file);
                (<any>requestOptions).data = formData;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
